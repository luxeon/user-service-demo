openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
paths:
  /api/users:
    post:
      summary: Create a new user
      operationId: create
      tags:
        - User
      requestBody:
        description: User creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input provided
        '409':
          description: User with the provided email or nickname already exists
  /api/users/{id}:
    put:
      summary: Update an existing user
      operationId: update
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of user to update
          schema:
            type: string
            format: uuid
      requestBody:
        description: User update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input provided
        '404':
          description: User not found

components:
  schemas:
    UserCreateRequest:
      type: object
      properties:
        first_name:
          type: string
          example: 'Alice'
          minLength: 1
          maxLength: 255
        last_name:
          type: string
          example: 'Bob'
          minLength: 1
          maxLength: 255
        nickname:
          type: string
          example: 'AB123'
          minLength: 1
          maxLength: 255
        password:
          type: string
          format: password
          example: 'supersecurepassword'
          minLength: 10
        email:
          type: string
          format: email
          example: 'alice@bob.com'
          x-field-extra-annotation: "@org.hibernate.validator.constraints.Email"
        country:
          type: string
          example: 'UK'
          minLength: 2
          maxLength: 2
      required:
        - first_name
        - last_name
        - nickname
        - password
        - email
        - country

    UserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          example: 'John'
          minLength: 1
          maxLength: 255
        last_name:
          type: string
          example: 'Doe'
          minLength: 1
          maxLength: 255
        country:
          type: string
          example: 'USA'
          minLength: 2
          maxLength: 2
      required:
        - first_name
        - last_name
        - country

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'd2a7924e-765f-4949-bc4c-219c956d0f8b'
        first_name:
          type: string
          example: 'Alice'
        last_name:
          type: string
          example: 'Bob'
        nickname:
          type: string
          example: 'AB123'
        email:
          type: string
          format: email
          example: 'alice@bob.com'
        country:
          type: string
          example: 'UK'
        created_at:
          type: string
          format: date-time
          example: '2019-10-12T07:20:50.52Z'
        updated_at:
          type: string
          format: date-time
          example: '2019-10-12T07:20:50.52Z'
